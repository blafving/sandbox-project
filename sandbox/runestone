import json
import requests_with_caching

def get_movies_from_tastedive(title):
    baseurl="https://tastedive.com/api/similar"
    params_d = { "q": title, "type": "movies", "limit": "5" }
    resp = requests_with_caching.get(baseurl, params=params_d)
    results = resp.json()
    return results
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_movies_from_tastedive("Bridesmaids")
# get_movies_from_tastedive("Black Panther")


---


import json
import requests_with_caching

def get_movies_from_tastedive(title):
    baseurl="https://tastedive.com/api/similar"
    params_d = { "q": title, "type": "movies", "limit": "5" }
    resp = requests_with_caching.get(baseurl, params=params_d)
    results = resp.json()
    return results

def extract_movie_titles(tastedrive_results):
    result = [lst['Name'] for lst in tastedrive_results['Similar']['Results']]
    return result
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
# extract_movie_titles(get_movies_from_tastedive("Black Panther"))

---

import json
import requests_with_caching

def get_movies_from_tastedive(title):
    baseurl="https://tastedive.com/api/similar"
    params_d = { "q": title, "type": "movies", "limit": "5" }
    resp = requests_with_caching.get(baseurl, params=params_d)
    results = resp.json()
    return results

def extract_movie_titles(tastedrive_results):
    result = [lst['Name'] for lst in tastedrive_results['Similar']['Results']]
    return result

def get_related_titles(lst_movies):
    results = [extract_movie_titles(get_movies_from_tastedive(title)) for title in lst_movies]
    results2 = []
    for lst in results:
        for elem in lst:
            if elem not in results2:
                results2.append(elem)
    return results2

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_related_titles(["Black Panther", "Captain Marvel"])
# get_related_titles([])

import json
import requests_with_caching

def get_movie_data(title):
    url = 'http://www.omdbapi.com/'
    params1 = {'t': title, 'r': 'json' }
    req = requests_with_caching.get(url, params=params1)
    return req.json()
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
print(json.dumps(get_movie_data("Venom"), sort_keys=True, indent=4))
# get_movie_data("Baby Mama")

